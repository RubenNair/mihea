CXX=g++
CXXFLAGS=-g -fopenmp -Wall -std=c++17 -DCPP_STANDALONE -I./ -Igomea/ -IEigen/
CXXFLAGS_O=-O2 -fopenmp -Wall -std=c++17 -DCPP_STANDALONE -I./ -Igomea/ -IEigen/ #-pg ## For profiling
SRCDIR=gomea/src
OBJDIR=build/obj
OBJDIR_O=build/obj_o
OBJDIR_DISCRETE=build/obj_discrete
OBJDIR_DISCRETE_O=build/obj__discrete_o
BINDIR=build

# list of all source files
SRCS=$(wildcard $(SRCDIR)/mixed_integer/*.cpp $(SRCDIR)/fitness/*.cpp $(SRCDIR)/fitness/benchmarks-discrete/*.cpp $(SRCDIR)/fitness/benchmarks-mixed/*.cpp $(SRCDIR)/common/*.cpp $(SRCDIR)/utils/*.cpp)
SRCS_DISCRETE=$(wildcard $(SRCDIR)/fitness/*.cpp $(SRCDIR)/fitness/benchmarks-discrete/*.cpp $(SRCDIR)/common/*.cpp $(SRCDIR)/utils/*.cpp $(SRCDIR)/discrete/*.cpp)

# generate a list of object files based on source files
OBJS=$(patsubst $(SRCDIR)/%.cpp,$(OBJDIR)/%.o,$(SRCS))
OBJS_O=$(patsubst $(SRCDIR)/%.cpp,$(OBJDIR_O)/%.o,$(SRCS))
OBJS_DISCRETE=$(patsubst $(SRCDIR)/%.cpp,$(OBJDIR_DISCRETE)/%.o,$(SRCS_DISCRETE))
OBJS_DISCRETE_O=$(patsubst $(SRCDIR)/%.cpp,$(OBJDIR_DISCRETE_O)/%.o,$(SRCS_DISCRETE))

# the final executable file
TARGET=$(BINDIR)/MixedIntegerGOMEA
TARGET_O=$(BINDIR)/MixedIntegerGOMEA_O
TARGET_DISCRETE=$(BINDIR)/DiscreteGOMEA
TARGET_DISCRETE_O=$(BINDIR)/DiscreteGOMEA_O

default: cpp_MI

# compile object files (mixed integer version)
$(OBJDIR)/%.o: $(SRCDIR)/%.cpp
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# link object files to generate executable
$(TARGET): $(OBJS)
	$(CXX) $(CXXFLAGS) $^ -o $@

## For optimized mixed integer version ##
$(OBJDIR_O)/%.o: $(SRCDIR)/%.cpp
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS_O) -c $< -o $@

$(TARGET_O): $(OBJS_O)
	$(CXX) $(CXXFLAGS_O) $^ -o $@

#### Same, but for discrete version ####
$(OBJDIR_DISCRETE)/%.o: $(SRCDIR)/%.cpp
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS) -c $< -o $@

$(TARGET_DISCRETE): $(OBJS_DISCRETE)
	$(CXX) $(CXXFLAGS) $^ -o $@

## For optimized discrete version ##
$(OBJDIR_DISCRETE_O)/%.o: $(SRCDIR)/%.cpp
	@mkdir -p $(@D)
	$(CXX) $(CXXFLAGS_O) -c $< -o $@

$(TARGET_DISCRETE_O): $(OBJS_DISCRETE_O)
	$(CXX) $(CXXFLAGS_O) $^ -o $@

here: 
	python3 setup.py build_ext --inplace

# Compile discrete version of code, in debug mode
cpp: $(TARGET_DISCRETE)
#	@mkdir -p build
#	g++ -g -Wall -std=c++17 -DCPP_STANDALONE -I./ -Igomea/ -IEigen/ gomea/src/fitness/*.cpp gomea/src/fitness/benchmarks-discrete/*.cpp gomea/src/common/*.cpp gomea/src/utils/*.cpp gomea/src/discrete/*.cpp -o build/DiscreteGOMEA

# Compile discrete version of code, in optimized mode
cpp_O: $(TARGET_DISCRETE_O)
#	@mkdir -p build
#	g++ -O2 -Wall -std=c++17 -DCPP_STANDALONE -I./ -Igomea/ -IEigen/ gomea/src/fitness/*.cpp gomea/src/fitness/benchmarks-discrete/*.cpp gomea/src/common/*.cpp gomea/src/utils/*.cpp gomea/src/discrete/*.cpp -o build/DiscreteGOMEA_O

# Compile mixed integer version of code, in debug mode
cpp_MI: $(TARGET)

# Compile mixed integer version of code, in optimized mode
cpp_MI_O: $(TARGET_O)

debug:
	python3 setup.py build_ext --inplace --debug

install:
	pip -q install build --user
	pip -q install cython --user
	python3 -m build --wheel
	pip install dist/*.whl --user

reinstall:
	python3 setup.py bdist_wheel
	pip install dist/*.whl --user --force-reinstall

doc:
	sphinx-build -b html docs/source/ docs/build/html

clean:
	rm -f *.so
	rm -rf gomea.egg-info/
	rm -rf build/
	rm -rf dist/
	rm -f gomea/*.cpp
	rm -f gomea/*.h
	rm -f gomea/*.so
	rm -rf cython_debug/
	rm -rf gomea/__pycache__/

# include dependencies generated by the compiler
-include $(OBJS:.o=.d)
